<style lang='css' src='../css/icon.css'></style>
<style lang='less' src='../css/color.less'></style>
<style lang='less' src='../css/text.less'></style>
<style lang='less' src='../css/utils.less'></style>
<style lang='less' src='../css/bg.less'></style>
<style lang='less' src='../css/style.less'></style>
<style lang="less">
  @import "../css/var";

  .container {
    padding: 10px;
    background-color: #efeff4;
    padding-bottom: 80px;
    padding-top: 40px
  }

  .food {
    background-color: #ffffff;
    margin-bottom: 5px;
    padding: 10px;
    position: relative;
    &-info {
      display: flex;
      flex-direction: row;
      align-items: stretch;
    }
    &-checkbox {
      width: 20px;
      height: 20px;
      border-radius: 20px;
      background-color: #e9e9e9;
      display: flex;
      align-items: center;
      justify-content: center;
      color: @color-success;
      &-checked {
        background-color: @color-success;
        color: #ffffff;
      }
    }
    &-pic {
      border-radius: 5px;
      width: 60px;
      height: 60px;
    }
    &-detail {
      flex: 1;
      padding-left: 10px;
      display: flex;
      justify-content: space-between;
      flex-direction: column;
    }
    &-title {
      font-size: 16px;
    }
    &-price {
      font-size: 14px;
      color: @color-muted;
      &-val {
        font-size: 16px;
        color: @color-success;
        font-weight: 500;
      }
    }
    &-footer {
      border-top: 1rpx dashed #ddd;
      margin-top: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    &-sale {
      font-size: 14px;
      color: @color-title;
      &-btn {
        /*border: 1rpx solid #ddd;*/
        font-size: 12px;
        padding: 3px 8px;
        border-radius: 2px;
        background-color: @color-danger;
        color: #ffffff;
      }
    }
  }

  .footer-bar {
    background-color: #595959;
    height: 50px;
    position: fixed;
    bottom: 0px;
    left: 0;
    right: 0px;
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    flex-direction: row;
    z-index: 100;
    &-btn {
      width: 100px;
      background-color: @color-success;
      color: #ffffff;
      text-align: center;
      line-height: 50px;
      font-size: 18px;
    }
    &-info {
      line-height: 50px;
      padding: 0 20px;
      color: #c0c0c0;
      font-weight: 400;
      &-val {
        color: #ffc109;
        font-size: 20px;
      }
    }
  }

  .switch-bar {
    flex-direction: row;
    display: flex;
    justify-content: center;
    align-items: center;
    &-text {
      font-size: 12px;
      color: @color-muted;
    }
  }

  .search-input {
    border-radius: 30px;
    height: 30px;
    line-height: 30px;
    border: 1rpx solid #ddd;
    padding: 0 20px;
    font-size: 14px;
    background-color: #ffffff;
    &-wrapper {
      background-color: #efeff4;
      position: fixed;
      top: 0;
      right: 0;
      left: 0;
      padding: 5px 10px;
      z-index: 1000;
    }
  }
  .category-view {
    position: fixed;
    top: 40px;
    width: 100px;
    background-color: #fff;
    left: 0;
    bottom: 50px;
    z-index: 10;
  }

  .category {
    font-size: 14px;
    padding: 10px 0;
    text-align: center;
    color: @color-title;
    &-selected {
      background-color: #efeff4;
      font-weight: bold;
    }
  }

  .food-list {
    padding-left: 95px;
  }
</style>
<template>
  <view class="container">
    <view class="search-input-wrapper">
      <input placeholder="输入商品名进行筛选" class="search-input" @input="searchInputChange"/>
    </view>
    <scroll-view
      scroll-y
      class="category-view">
      <view class="category {{searchParam.categoryName === '' ? 'category-selected' : ''}}" @tap="selectCategory('')" wx:key="">所有分类</view>
      <view wx:for="{{foodCategoryList}}" class="category {{searchParam.categoryName === item ? 'category-selected' : ''}}" @tap="selectCategory({{item}})" wx:key="{{item}}">{{item}}</view>
    </scroll-view>
    <view class="food-list">
      <block wx:for="{{showQuoted ? quotedFoodList : foodList}}">
        <view class="food" wx:key="{{item.foodId}}">
          <view class="food-info" @tap="toggleSelected({{index}})">
            <image src="{{item.foodPicture}}" class="food-pic" mode="aspectFill"></image>
            <view class="food-detail">
              <view class="food-title">{{item.foodName}}</view>
              <view class="flex-row space-between align-flex-end">
                <view class="food-price">
                  现价: ¥
                  <text class="food-price-val">{{item.foodPrice}}</text>
                  元/{{item.foodUnit}}
                </view>
              </view>
            </view>
          </view>
          <view class="food-footer" @tap="toggleSelected({{index}})">
            <view class="food-checkbox {{item.checked && 'food-checkbox-checked'}}">
              <text class="iconfont icon-check" wx:if="{{item.checked}}"></text>
            </view>
            <i-input-number value="{{item.quotePrice || item.foodPrice}}" min="0" max="10000" data-idx="{{index}}"
                            step="0.1" @change="quotePriceChange"/>
          </view>
          <view class="food-footer">
            <i-tag
              class="i-tags"
              name="{{item.sale ? '已上架' : '已下架'}}"
              color="{{item.sale ? 'green' : 'default'}}">
              {{item.sale ? '已上架' : '已下架'}}
            </i-tag>
            <view class="food-sale-btn" wx:if="{{item.sale}}" @tap="soldOut({{index}})">下架</view>
          </view>
        </view>
      </block>
    </view>
    <view class="footer-bar">
      <view class="footer-bar-info">已报
        <text class="footer-bar-info-val">{{quotedFoodList.length}}</text>
        个
      </view>
      <view class="switch-bar">
        <i-switch value="{{showQuoted}}" size="large" bind:change="showQuotedSwitchChange">
          <view slot="open">隐藏</view>
          <view slot="close">查看</view>
        </i-switch>
      </view>
      <view class="footer-bar-btn activeable" @tap="submit">提交</view>
    </view>
    <view class="scrolltop-btn" @tap="scrollTop">
      <text class="iconfont icon-fold"></text>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  let Deferred = require('../utils/deferred')
  let api = require('../utils/api')
  const DEFAULT_SEARCH_PARAM = {
    page: 1,
    categoryName: ''
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '商品管理',
      enablePullDownRefresh: true,
      backgroundTextStyle: 'dark',
      backgroundColor: '#efeff4',
      'usingComponents': {
        'i-input-number': '../iview/input-number/index',
        'i-switch': '../iview/switch/index',
        'i-tag': '../iview/tag/index',
        'i-checkbox': '../iview/checkbox/index'
      }
    }
    components = {}

    data = {
      searchParam: Object.assign({}, DEFAULT_SEARCH_PARAM),
      loading: false,
      hasNext: true,
      foodList: [],
      quotedFoodList: [],
      foodCategoryList: [],
      showQuoted: false,
      keyword: ''
    }

    methods = {
      quotePriceChange(e) {
        let dataset = e.currentTarget.dataset
        let idx = dataset.idx
        let food = this.foodList[idx]
        food.quotePrice = e.detail.value
        food.checked = true
        this.quoteFood(food)
        this.handleFoodShow()
      },
      scrollTop() {
        wx.pageScrollTo({
          scrollTop: 0,
          duration: 300
        })
      },
      searchInputChange(e) {
        DEFAULT_SEARCH_PARAM.foodName = e.detail.value
        this.resetSearchParam()
        this.loadingSearch()
      },
      selectCategory(category) {
        DEFAULT_SEARCH_PARAM.categoryName = category
        this.resetSearchParam()
        this.loadingSearch()
      },
      soldOut(idx) {
        let food = this.foodList[idx]
        let self = this
        wx.showModal({
          title: '提示',
          content: '确认下架该商品吗？',
          success(res) {
            if (res.confirm) {
              api.storeUserFood.soldOut({foodId: food.foodId}).done(rs => {
                let data = rs.data
                if (data) {
                  food.sale = false
                  wx.showToast({
                    title: '下架成功',
                    icon: 'success',
                    duration: 500
                  })
                  self.$apply()
                }
              })
            } else if (res.cancel) {

            }
          }
        })
      },
      showQuotedSwitchChange({detail}) {
        this.showQuoted = detail.value
        // this.loadingSearch()
        this.$apply()
      },
      toggleSelected(index) {
        let food = this.showQuoted ? this.quotedFoodList[index] : this.foodList[index]
        food.checked = !food.checked
        if (!food.quotePrice) {
          food.quotePrice = food.foodPrice
        }
        this.quoteFood(food)
        this.handleFoodShow()
      },
      submit() {
        let self = this
        wx.showModal({
          title: '问题提示',
          content: '提交前，请确认您的报价信息的准确！',
          confirmText: '确认提交',
          success(res) {
            if (res.confirm) {
              let foodQuoteInfoList = []
              self.quotedFoodList.forEach((quotedInfo) => {
                foodQuoteInfoList.push({
                  foodId: quotedInfo.foodId,
                  price: quotedInfo.quotePrice
                })
              })
              api.quote.food({
                json: JSON.stringify({
                  foodQuoteInfoList: foodQuoteInfoList
                })
              }).done(rs => {
                wx.showModal({
                  title: '温馨提示',
                  content: '报价单提交成功，请等待客服审核！',
                  success(res) {
                    self.clearFoodQuoteList()
                    self.$apply()
                    wx.switchTab({
                      url: '/pages/food-quote-sheet'
                    })
                  }
                })
              })
            } else if (res.cancel) {

            }
          }
        })
      }
    }

    events = {}

    clearFoodQuoteList() {
      this.quotedFoodList.forEach(qf => {
        qf.checked = false
      })
      this.quotedFoodList = []
      this.$apply()
    }

    resetSearchParam() {
      Object.assign(this.searchParam, DEFAULT_SEARCH_PARAM)
      this.hasNext = true
    }

    onReachBottom() {
      if (this.hasNext) {
        this.searchParam.page++
        this.search(true)
      }
    }

    onPullDownRefresh() {
      this.resetSearchParam()
      this.search().always(() => {
        wx.stopPullDownRefresh()
      })
    }

    loadingSearch(flag) {
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout)
      }
      this.searchTimeout = setTimeout(() => {
        wx.showLoading()
        this.search(flag).always(() => {
          wx.hideLoading()
        })
      }, 500)
    }

    search(append, callback) {
      if (this.showQuoted) {
        this.searchParam.foodIdList = this.quotedFoodList.map(o => o.foodId)
      } else {
        delete this.searchParam.foodIdList
      }
      return api.quote.foodSearch(this.searchParam).done((rs) => {
        rs.data.results.forEach(food => {
          if (food.foodPrice) {
            food.foodPrice = parseFloat(food.foodPrice.toFixed(1))
          }
          let i = this.checkQuoted(food)
          if (i !== -1) {
            let qf = this.quotedFoodList[i]
            food.quotePrice = qf.quotePrice
            food.checked = true
            this.quotedFoodList[i] = food
          }
        })
        if (append) {
          this.foodList = this.foodList.concat(rs.data.results)
        } else {
          this.foodList = rs.data.results
        }
        let paging = rs.data
        this.hasNext = paging.hasNext
        this.$apply()
      }).always(() => {
        callback && callback()
      })
    }

    quoteFood(food) {
      if (food.checked) {
        this.checkQuoted(food) === -1 && this.quotedFoodList.push(food)
      } else {
        for (var i = 0; i < this.quotedFoodList.length; i++) {
          if (food.foodId === this.quotedFoodList[i].foodId) {
            this.quotedFoodList.splice(i, 1)
          }
        }
      }
    }

    handleFoodShow() {
      let self = this
      this.foodList.forEach(food => {
        if (self.keyword) {
          food.hide = food.foodName.indexOf(self.keyword) === -1
        } else {
          if (!self.showQuoted) {
            food.hide = false
          } else {
            food.hide = !food.checked
          }
        }
      })
      this.$apply()
    }

    checkQuoted(food) {
      for (var i = 0; i < this.quotedFoodList.length; i++) {
        if (food.foodId === this.quotedFoodList[i].foodId) {
          return i
        }
      }
      return -1
    }

    loadData() {
      return api.page.quote().done(rs => {
        this.foodCategoryList = rs.data.foodCategoryList
        this.$apply()
      })
    }

    onLoad() {
      Deferred.when(this.loadData(), this.search()).always(() => {
        this.loaded = true
      })
    }
  }
</script>
