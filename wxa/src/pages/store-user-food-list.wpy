<style lang='css' src='../css/icon.css'></style>
<style lang='less' src='../css/color.less'></style>
<style lang='less' src='../css/text.less'></style>
<style lang='less' src='../css/utils.less'></style>
<style lang='less' src='../css/bg.less'></style>
<style lang='less' src='../css/style.less'></style>
<style lang="less">
  @import "../css/var";

  .container {
    padding: 10px;
    background-color: #efeff4;
    padding-top: 40px;
  }

  .food {
    background-color: #ffffff;
    margin-bottom: 5px;
    padding: 10px;
    position: relative;
    &-info {
      display: flex;
      flex-direction: row;
      align-items: stretch;
      position: relative;
    }
    &-offsale{
      position: absolute;
      border-radius: 10rpx;
      width: 120rpx;
      height: 120rpx;
      text-align: center;
      line-height: 120rpx;
      font-size: 30rpx;
      top: 0;
      left: 0;
      background-color: rgba(204, 204, 204, 0.7);
    }
    &-checkbox {
      width: 20px;
      height: 20px;
      border-radius: 20px;
      background-color: #e9e9e9;
      display: flex;
      align-items: center;
      justify-content: center;
      color: @color-success;
      &-checked {
        background-color: @color-success;
        color: #ffffff;
      }
    }
    &-pic {
      border-radius: 5px;
      width: 60px;
      height: 60px;
    }
    &-detail {
      flex: 1;
      padding-left: 10px;
      display: flex;
      justify-content: space-between;
      flex-direction: column;
    }
    &-title {
      font-size: 16px;
    }
    &-price {
      font-size: 14px;
      color: @color-muted;
      &-val {
        font-size: 16px;
        color: @color-success;
        font-weight: 500;
      }
    }
    &-footer {
      /*border-top: 1rpx dashed #ddd;*/
      margin-top: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    &-sku-btn {
      font-size: 12px;
      padding: 3px 8px;
      border-radius: 2px;
      background-color: @color-info;
      color: #ffffff;
    }
    &-publish-sku-btn {
      font-size: 12px;
      padding: 3px 8px;
      border-radius: 2px;
      background-color: @color-warning;
      color: #ffffff;
    }
    &-sale {
      font-size: 14px;
      color: @color-title;
      &-btn {
        /*border: 1rpx solid #ddd;*/
        font-size: 12px;
        padding: 3px 8px;
        border-radius: 2px;
        background-color: @color-danger;
        color: #ffffff;
      }
      &-btn-change {
        /*border: 1rpx solid #ddd;*/
        font-size: 13px;
        padding: 3px 8px;
        border-radius: 2px;
        background-color: @color-danger;
        color: #ffffff;
      }
      &-btn-on {
        /*border: 1rpx solid #ddd;*/
        font-size: 12px;
        padding: 3px 8px;
        border-radius: 2px;
        background-color: @color-success;
        color: #ffffff;
      }
    }
  }

  .search-input {
    border-radius: 30px;
    height: 30px;
    line-height: 30px;
    border: 1rpx solid #ddd;
    padding: 0 20px;
    font-size: 14px;
    background-color: #ffffff;
    flex: 1;
    &-wrapper {
      display: flex;
      flex-direction: row;
      align-items: center;
      background-color: #efeff4;
      position: fixed;
      top: 0;
      right: 0;
      left: 0;
      padding: 5px 10px;
      z-index: 1000;
    }
    &-btn {
      border-radius: 30px;
      height: 30px;
      line-height: 30px;
      width: 40px;
      margin-left: 5px;
      font-size: 14px;
      color: #ffffff;
      text-align: center;
      background-color: @color-info;
    }
  }

  .category-view {
    position: fixed;
    top: 40px;
    width: 100px;
    background-color: #fff;
    left: 0;
    z-index: 10;
    bottom: 0;
  }

  .category {
    font-size: 14px;
    height: 34px;
    line-height: 34px;
    text-align: center;
    color: @color-title;
    &-selected {
      background-color: #efeff4;
      font-weight: bold;
    }
    &-child {
      font-size: 12px;
      height: 34px;
      line-height: 34px;
      text-align: center;
      color: @color-title;
      background-color: #efeff4;
      &-selected {
        background-color: #f6f6f6;
        font-weight: bold;
      }
    }
  }

  .food-list {
    padding-left: 95px;
    margin-top: 34px;
  }

  .filter-bar {
    position: fixed;
    left: 100px;
    padding-left: 10px;
    top: 40px;
    right: 0;
    height: 34px;
    line-height: 34px;
    background-color: #efeff4;
    text-align: center;
    font-size: 14px;
    z-index: 10;
  }

  .talk-btn {
    box-shadow: 0px 0px 10px rgba(102, 102, 102, 0.39);
    width: 80%;
    height: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 50px;
    background-color: rgba(102, 102, 102, 0.39);
    position: fixed;
    right: 10%;
    left: 10%;
    bottom: 30%;
    border-radius: 40px;
    color: #f10d46e1;
    z-index: 10;
  }

  .voice-btn {
    box-shadow: 0px 0px 10px rgba(102, 102, 102, 0.39);
    width: 26%;
    height: 30px;
    padding: 0 5px;
    text-align: center;
    line-height: 30px;
    font-size: 20px;
    background-color: #495060;
    position: fixed;
    right: 20%;
    bottom: 0px;
    border-radius: 10px;
    color: #ffffff;
    z-index: 10;
  }
  .return{
    box-shadow: 0px 0px 10px rgba(102, 102, 102, 0.39);
    width: 26%;
    height: 30px;
    padding: 0 5px;
    text-align: center;
    line-height: 30px;
    font-size: 20px;
    background-color: #495060;
    position: fixed;
    left: 20%;
    bottom: 0px;
    border-radius: 10px;
    color: #ffffff;
    z-index: 10;
  }

  .modal-mask {
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background: #000;
    opacity: 0.5;
    overflow: hidden;
    z-index: 9000;
    color: #fff;
  }
  .modal-dialog {
    width: 80%;
    overflow: hidden;
    position: fixed;
    top: 10%;
    left: 0;
    right: 0;
    z-index: 9999;
    background: #f9f9f9;
    margin: auto;
    border-radius: 18px;
  }
  .modal-title {
    padding-top: 25px;
    font-size: 20px;
    color: #030303;
    text-align: center;
  }
  .modal-content {
    padding: 25px 16px;
  }
  .modal-input {
    display: flex;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 2px;
    font-size: 18px;
  }
  .input {
    width: 100%;
    height: 50px;
    font-size: 18px;
    line-height: 18px;
    padding: 0 10px;
    box-sizing: border-box;
    color: #333;
  }
  .modal-footer {
    display: flex;
    flex-direction: row;
    height: 43px;
    border-top: 1px solid #dedede;
    font-size: 17px;
    line-height: 43px;
  }
  .btn-cancel {
    width: 50%;
    color: #666;
    text-align: center;
    border-right: 1px solid #dedede;
  }
  .btn-confirm {
    width: 50%;
    color: #ec5300;
    text-align: center;
  }
</style>
<template>
  <view class="container">
    <view class="search-input-wrapper">
      <input placeholder="输入商品名进行筛选" class="search-input" @input="searchInputChange" value="{{searchFoodName}}"/>
      <view class="search-input-btn iconfont icon-plus" @tap="open('food-list')"></view>
    </view>
    <scroll-view
      scroll-y
      class="category-view">
      <view class="category {{searchParam.foodCategoryName === ' ' ? 'category-selected' : ''}}"
            @tap="selectCategory(' ')" wx:key="">所有分类</view>
      <block wx:for="{{foodCategoryList}}">
        <view class="category {{searchParam.foodCategoryName === item ? 'category-selected' : ''}}"
              @tap="selectCategory({{item}})" wx:key="{{item}}">{{item}}</view>
        <block wx:if="{{searchParam.foodCategoryName === item && foodCategoryChildrenMap[item]}}">
          <view wx:for="{{foodCategoryChildrenMap[item]}}" wx:for-item="child"
                @tap="selectCategoryChild({{child.name}})"
                class="category-child {{searchParam.foodCategoryChildName === child.name ? 'category-child-selected' : ''}}">
            {{child.name}}
          </view>
        </block>
      </block>
    </scroll-view>
    <picker @change="saleChange" mode="selector" value="{{saleIndex}}" range="{{saleList}}">
      <view class="filter-bar">{{saleShow}}<text class="iconfont status-select-icon icon-unfold"></text></view>
    </picker>
    <view class="food-list">
      <block wx:for="{{sufList}}">
        <view class="food" wx:key="{{item.id}}">
          <view class="food-info">
            <image src="{{item.food.picture}}" @tap="preview({{item.food.picture}})" class="food-pic" mode="aspectFill"></image>
            <view class="food-offsale" wx:if="{{!item.sale}}" @tap="preview({{item.food.picture}})">
              已下架
            </view>
            <view class="food-detail">
              <view class="food-title">{{item.food.name}}</view>
              <view class="flex-row space-between align-flex-end">
                <view class="food-price">售价: ¥ <text class="food-price-val">{{item.quotePriceShow}}</text>元/{{item.foodUnit}}</view>
              </view>
              <block wx:if="{{item.quoteStatus === 'WAIT_VERIFY'}}">
                <view class="flex-row space-between align-flex-end">
                  <view class="food-price">待审: ¥ <text class="food-price-val">{{item.alterQuotePrice}}</text>元/{{item.foodUnit}}</view>
                </view>
              </block>
            </view>
          </view>
          <view class="food-footer">
            <!--<modal hidden="{{item.hideModel}}" data-idx="{{index}}" title="输入报价{{changePrice == null ? 0 : changePrice}}元/{{item.foodUnit}}" confirm-text="确认" cancel-text="取消" bindcancel="cancel({{index}})" bindconfirm="confirmb">
              <input class="search-input" placeholder="请输入报价 单位 元" value="{{item.quotePriceShow}}" @input="getChange" focus/>
            </modal>-->
            <view class="modal-dialog" hidden="{{item.hideModel}}">
              <view class="modal-title">输入报价{{changePrice == null ? 0 : changePrice}}元/{{item.foodUnit}}</view>
              <view class="modal-content">
                <input class="search-input" type="digit" placeholder="请输入报价 单位 元" value="{{changePrice}}" @input="getChange" focus="{{!item.hideModel}}"/>
              </view>
              <view class="modal-footer">
                <view class="btn-cancel" bindtap="cancel({{index}})" >取消</view>
                <view class="btn-confirm" bindtap="confirmb" data-idx="{{index}}">确定</view>
              </view>
            </view>
            <view class="modal-mask" bindtap="cancel({{index}})" hidden="{{item.hideModel}}"></view>
            <i-tag
              class="i-tags"
              name="{{item.quoteStatusTitle}}"
              color="{{item.quoteStatus === 'WAIT_VERIFY' ? 'yellow' : ''}}">
              {{item.quoteStatusTitle}}
            </i-tag>
          </view>
          <i-tag class="i-tags" color="yellow" wx:if="{{item.warningPrice && item.alterQuotePrice > item.warningPrice}}">此产品价格过高影响销售，请降低报价</i-tag>
          <view class="food-footer">
            <view class="food-sale-btn-change" @tap="modalinput({{index}})">改价</view>
            <view class="food-publish-sku-btn" @tap="publishSku({{index}})">规格</view>
            <view class="food-sku-btn" @tap="addSku({{index}})">新增</view>
            <view class="food-sale-btn" wx:if="{{item.sale}}" @tap="soldOut({{index}})">下架</view>
            <view class="food-sale-btn-on" wx:if="{{!item.sale}}"
                  @tap="sale({{index}})">上架</view>
          </view>
        </view>
      </block>
    </view>
    <view class="scrolltop-btn" @tap="scrollTop">
      <text class="iconfont icon-fold"></text>
    </view>
    <view class="talk-btn" wx:if="{{recording == true}}">开始语音</view>
    <view class="voice-btn" catchtouchstart="streamRecord" catchtouchend="end">按住说话</view>
    <view class="return" @tap="back">返回首页</view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  let Deferred = require('../utils/deferred')
  let api = require('../utils/api')
  const plugin = requirePlugin('WechatSI') // 引入语音识别插件
  const manager = plugin.getRecordRecognitionManager()
  const DEFAULT_SEARCH_PARAM = {
    page: 1,
    foodCategoryName: '',
    foodCategoryChildName: ''
  }

  var changeTimeout = 0

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '商品管理',
      enablePullDownRefresh: true,
      backgroundTextStyle: 'dark',
      backgroundColor: '#efeff4',
      'usingComponents': {
        'i-input-number': '../iview/input-number/index',
        'i-tag': '../iview/tag/index'
      }
    }
    components = {}

    data = {
      searchParam: Object.assign({}, DEFAULT_SEARCH_PARAM),
      loading: false,
      hasNext: true,
      foodCategoryName: '',
      foodCategoryChildName: '',
      sufList: [],
      foodCategoryList: [],
      keyword: '',
      changePrice: 0,
      saleList: ['全部', '已上架', '未上架'],
      saleIndex: 1,
      saleShow: '全部',
      recording: false, // 正在录音
      recordStatus: 0,
      searchFoodName: '',
      foodCategoryChildrenMap: {}
    }

    watch = {
    }

    methods = {
      streamRecord(e) {
        manager.start()
        this.recording = true
        this.setData({
          recordStatus: 0
        })
      },
      end() {
        // 防止重复触发stop函数
        if (!this.recording || this.recordStatus !== 0) {
          console.warn('has finished!')
          return
        }
        this.recording = false
        // 停止录音
        manager.stop()
      },
      confirmb(e) {
        let dataset = e.currentTarget.dataset
        let idx = dataset.idx
        let suf = this.sufList[idx]
        suf.$lastAlterQuotePrice = suf.alterQuotePrice
        suf.alterQuotePrice = this.changePrice
        suf.alterQuotePriceShow = suf.alterQuotePrice.toFixed(1)
        if (changeTimeout) {
          clearTimeout(changeTimeout)
        }
        changeTimeout = setTimeout(() => {
          api.storeUserFood.changeAlterQuotePrice({
            id: suf.food.id, alterQuotePrice: suf.alterQuotePrice
          }).done(rs => {
            console.log(rs.data)
            Object.assign(suf, rs.data)
            this.$apply()
          })
        }, 500)
        suf.hideModel = true
      },
      getChange(e) {
        this.changePrice = parseFloat(e.detail.value)
      },
      back() {
        wx.navigateBack({
          delta: 1
        })
      },
      quotePriceChange(e) {
        let dataset = e.currentTarget.dataset
        let idx = dataset.idx
        let suf = this.sufList[idx]
        suf.$lastAlterQuotePrice = suf.alterQuotePrice
        suf.alterQuotePrice = parseFloat(e.detail.value)
        suf.alterQuotePriceShow = suf.alterQuotePrice.toFixed(1)
        if (changeTimeout) {
          clearTimeout(changeTimeout)
        }
        changeTimeout = setTimeout(() => {
          api.storeUserFood.changeAlterQuotePrice({
            id: suf.id, alterQuotePrice: suf.alterQuotePrice
          }).done(rs => {
            Object.assign(suf, rs.data)
            this.$apply()
          })
        }, 500)
      },
      preview(url) {
        wx.previewImage({
          current: '', // 当前显示图片的http链接
          urls: [url] // 需要预览的图片http链接列表
        })
      },
      modalinput(idx) {
        let suf = this.sufList[idx]
        suf.hideModel = !suf.hideModel
        this.changePrice = suf.quotePrice
      },
      cancel(idx) {
        let suf = this.sufList[idx]
        suf.hideModel = true
      },
      saleChange({detail}) {
        this.selectSale(detail.value)
        this.resetSearchParam()
        this.loadingSearch()
      },
      scrollTop() {
        wx.pageScrollTo({
          scrollTop: 0,
          duration: 300
        })
      },
      searchInputChange(e) {
        DEFAULT_SEARCH_PARAM.foodName = e.detail.value
        DEFAULT_SEARCH_PARAM.foodCategoryName = ''
        DEFAULT_SEARCH_PARAM.foodCategoryChildName = ''
        this.resetSearchParam()
        this.loadingSearch()
      },
      selectCategory(category) {
        DEFAULT_SEARCH_PARAM.foodCategoryName = category
        DEFAULT_SEARCH_PARAM.foodCategoryChildName = null
        this.loadFoodCategoryChildren(category).then(list => {
          if (list.length) {
            this.doSelectCategoryChild(list[0].name)
          } else {
            this.selectSale(0)
            this.resetSearchParam()
            this.loadingSearch()
          }
        })
      },
      selectCategoryChild(category) {
        DEFAULT_SEARCH_PARAM.foodCategoryChildName = DEFAULT_SEARCH_PARAM.foodCategoryChildName === category ?
          null : category
        this.selectSale(0)
        this.resetSearchParam()
        this.loadingSearch()
      },
      open(url) {
        wx.navigateTo({
          url: url
        })
      },
      soldOut(idx) {
        let suf = this.sufList[idx]
        let self = this
        wx.showModal({
          title: '提示',
          content: '确认下架该商品吗？',
          success(res) {
            if (res.confirm) {
              api.storeUserFood.soldOut({foodId: suf.food.id}).done(rs => {
                let data = rs.data
                if (data) {
                  suf.sale = false
                  wx.showToast({
                    title: '下架成功',
                    icon: 'success',
                    duration: 500
                  })
                  self.$apply()
                }
              })
            } else if (res.cancel) {

            }
          }
        })
      },
      addSku(idx) {
        let suf = this.sufList[idx]
        wx.navigateTo({
          url: '/pages/food-apply?foodId=' + suf.food.id
        })
      },
      publishSku(idx) {
        let suf = this.sufList[idx]
        wx.navigateTo({
          url: '/pages/store-user-food-sku?id=' + suf.id
        })
      },
      sale(idx) {
        let suf = this.sufList[idx]
        let self = this
        wx.showModal({
          title: '提示',
          content: '确认上架该商品吗？',
          success(res) {
            if (res.confirm) {
              api.storeUserFood.sale({foodId: suf.food.id}).done(rs => {
                let data = rs.data
                if (data) {
                  suf.sale = true
                  wx.showToast({
                    title: '上架成功',
                    icon: 'success',
                    duration: 500
                  })
                  self.$apply()
                }
              })
            } else if (res.cancel) {

            }
          }
        })
      }
    }

    events = {}
    showRecordEmptyTip() {
      this.setData({
        recording: false,
        bottomButtonDisabled: false
      })
      wx.showToast({
        title: '请说话',
        duration: 2000,
        icon: 'success',
        success: function(res) {},
        fail: function(res) {
          console.log(res)
        }
      })
    }

    // 权限询问
    getRecordAuth() {
      wx.getSetting({
        success(res) {
          console.log('succ')
          console.log(res)
          if (!res.authSetting['scope.record']) {
            wx.authorize({
              scope: 'scope.record',
              success() {
                // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
                console.log('succ auth')
              },
              fail() {
                console.log('fail auth')
              }
            })
          } else {
            console.log('record has been authed')
          }
        },
        fail(res) {
          console.log('fail')
          console.log(res)
        }
      })
    }

    resetSearchParam() {
      Object.assign(this.searchParam, DEFAULT_SEARCH_PARAM)
      this.hasNext = true
    }

    doSelectCategoryChild(category) {
      DEFAULT_SEARCH_PARAM.foodCategoryChildName = category
      this.selectSale(0)
      this.resetSearchParam()
      this.loadingSearch()
    }

    loadFoodCategoryChildren (foodName) {
      return new Promise(resolve => {
        if (this.foodCategoryChildrenMap[foodName]) {
          resolve(this.foodCategoryChildrenMap[foodName])
          return
        }
        api.foodCategory.listByParentName({parentName: foodName}).done(rs => {
          this.foodCategoryChildrenMap[foodName] = rs.data
          this.$apply()
          resolve(rs.data)
        })
      })
    }

    selectSale(idx) {
      this.saleIndex = idx
      this.saleShow = this.saleList[idx]
      switch (idx + '') {
        case '0':
          DEFAULT_SEARCH_PARAM.sale = ''
          break
        case '1':
          DEFAULT_SEARCH_PARAM.sale = true
          break
        case '2':
          DEFAULT_SEARCH_PARAM.sale = false
          break
      }
    }

    onReachBottom() {
      if (this.hasNext) {
        this.searchParam.page++
        this.search(true)
      }
    }

    onPullDownRefresh() {
      this.resetSearchParam()
      this.loadData()
      this.search().always(() => {
        wx.stopPullDownRefresh()
      })
    }

    loadingSearch(flag) {
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout)
      }
      this.searchTimeout = setTimeout(() => {
        wx.showLoading()
        this.search(flag).always(() => {
          wx.hideLoading()
          if (!this.searchParam.page || this.searchParam.page === 1) {
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 300
            })
          }
        })
      }, 500)
    }

    search(append, callback) {
      const param = {
        ...this.searchParam,
        foodCategoryName: this.searchParam.foodCategoryChildName || this.searchParam.foodCategoryName
      }
      console.info(param)
      return api.storeUserFood.search(param).done((rs) => {
        rs.data.results.forEach(suf => {
          suf.quotePriceShow = suf.quotePrice.toFixed(1)
          suf.hideModel = true
          suf.alterQuotePrice = suf.alterQuotePrice || suf.quotePrice
          suf.alterQuotePriceShow = suf.alterQuotePrice.toFixed(1)
        })
        if (append) {
          this.sufList = this.sufList.concat(rs.data.results)
        } else {
          this.sufList = rs.data.results
        }
        let paging = rs.data
        this.hasNext = paging.hasNext
        this.$apply()
      }).always(() => {
        callback && callback()
      })
    }

    loadData() {
      return api.page.storeUserFoodList().done(rs => {
        this.foodCategoryList = rs.data.foodCategoryList
        this.$apply()
      })
    }

    onLoad() {
      this.getRecordAuth()
      // 绑定识别结束事件
      manager.onStop = res => {
        // 获取语音文字
        let text = res.result.replace('。', '')
        if (text === '') {
          this.showRecordEmptyTip()
          return
        }
        console.log(text)
        // 向父组件传递获取到的文字信息
        this.$emit('getText', text)
        this.searchFoodName = text
        DEFAULT_SEARCH_PARAM.foodName = text
        DEFAULT_SEARCH_PARAM.foodCategoryName = ''
        DEFAULT_SEARCH_PARAM.foodCategoryChildName = ''
        this.resetSearchParam()
        this.loadingSearch()
      }
      this.selectSale(0)
      Deferred.when(this.loadData(), this.search()).always(() => {
        this.loaded = true
      })
    }
  }
</script>
